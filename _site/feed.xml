<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.3.4">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2024-11-01T12:30:41+09:00</updated><id>http://localhost:4000/feed.xml</id><title type="html">뭐라도 하겠지</title><subtitle>뭐라도 하면 좋겠죠?</subtitle><author><name>두식</name></author><entry><title type="html">블로그를 다시시작하며</title><link href="http://localhost:4000/%EC%9E%A1%EB%8B%B4/test-category/" rel="alternate" type="text/html" title="블로그를 다시시작하며" /><published>2024-10-23T00:00:00+09:00</published><updated>2024-10-23T00:00:00+09:00</updated><id>http://localhost:4000/%EC%9E%A1%EB%8B%B4/test-category</id><content type="html" xml:base="http://localhost:4000/%EC%9E%A1%EB%8B%B4/test-category/"><![CDATA[<blockquote>
  <p>사실 이 블로그는 일전에 멀티테마를 적용해보고싶어서 이리저리 시도해보다가 뜻대로 되지않아 방치했었다.<br />
회사에 들어가 일을 시작하게되면 항상 개인 깃허브는 방치하게되었는데 이를 벗어나고자 다시 블로그에 손을 댄다.<br />
“뭐라도하겠지” 라는 마음가짐으로.</p>
</blockquote>

<p>이전 처럼 괜히 익숙하지도 않은 지킬에 멀티테마같은거 적용할생각은 접고
예외상황을 최대한 피하기위해 기존 블로그는 아카이브하고 가장 많은 사람들이 사용하는 테마를 선택해 다시 설치했다.</p>

<h3 id="설치에-참고한-선지자들의-블로그">설치에 참고한 선지자들의 블로그</h3>

<p><a href="https://velog.io/@jbourbaki/GitHub-%EB%B8%94%EB%A1%9C%EA%B7%B8-%EB%A7%8C%EB%93%A4%EA%B8%B0">GitHub 블로그 만들기: 정대현님 블로그</a>
<a href="https://jojoldu.tistory.com/288">Mac에서 Gem::FilePermissionError 에러 발생시 해결 방법: 기억보단 기록을</a></p>]]></content><author><name>두식</name></author><category term="잡담" /><category term="깃허브블로그" /><summary type="html"><![CDATA[사실 이 블로그는 일전에 멀티테마를 적용해보고싶어서 이리저리 시도해보다가 뜻대로 되지않아 방치했었다. 회사에 들어가 일을 시작하게되면 항상 개인 깃허브는 방치하게되었는데 이를 벗어나고자 다시 블로그에 손을 댄다. “뭐라도하겠지” 라는 마음가짐으로.]]></summary></entry><entry><title type="html">3장 슬기롭게 주석 사용하기</title><link href="http://localhost:4000/%EB%8F%84%EC%84%9C/%EC%9E%90%EB%B0%94%EC%BD%94%EB%94%A9%EC%9D%98_%EA%B8%B0%EC%88%A0/java_coding_skill_chapter3/" rel="alternate" type="text/html" title="3장 슬기롭게 주석 사용하기" /><published>2022-10-03T16:35:35+09:00</published><updated>2022-10-03T16:35:35+09:00</updated><id>http://localhost:4000/%EB%8F%84%EC%84%9C/%EC%9E%90%EB%B0%94%EC%BD%94%EB%94%A9%EC%9D%98_%EA%B8%B0%EC%88%A0/java_coding_skill_chapter3</id><content type="html" xml:base="http://localhost:4000/%EB%8F%84%EC%84%9C/%EC%9E%90%EB%B0%94%EC%BD%94%EB%94%A9%EC%9D%98_%EA%B8%B0%EC%88%A0/java_coding_skill_chapter3/"><![CDATA[<h1 id="3장-슬기롭게-주석-사용하기">3장 슬기롭게 주석 사용하기</h1>

<blockquote>
  <p>훌륭한 코드는 그자체로 최고의 설명서다.<br />
주석을 추가하기전에 “주석이 필요없더록 코드를 향상시킬 방법이 없을까?” 라고 자문해보자.</p>
</blockquote>

<h2 id="31-지나치게-많은-주석-없애기">3.1 지나치게 많은 주석 없애기</h2>

<ul>
  <li>코드가 전하는 내용을 반복할 뿐인 주석은 모두 제거
    <ul>
      <li>코드에 뭔가 덧붙여 설명하지 않는 주석은 의미리스하다.</li>
      <li>ex) 코드만 보아서는 드러나지 않는 정보가 들어간 주석은 살려둔다.</li>
    </ul>
  </li>
</ul>

<h2 id="32-주석-처리된-코드-제거">3.2 주석 처리된 코드 제거</h2>

<ul>
  <li>혼란만 가중시킴.</li>
  <li>버전관리, 형상관리 툴을 신뢰하고 지우자.</li>
</ul>

<h2 id="33-주석을-상수로-대체">3.3 주석을 상수로 대체</h2>

<ul>
  <li>예시코드</li>
</ul>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// as - is</span>
<span class="kd">enum</span> <span class="nc">SmallDistanceUnit</span><span class="o">{</span>
  <span class="no">CENTIMETER</span><span class="o">,</span> <span class="no">INCH</span><span class="o">;</span>

  <span class="kt">double</span> <span class="nf">getConversionRate</span><span class="o">(</span><span class="nc">SmallDistanceUnit</span> <span class="n">unit</span><span class="o">)</span> <span class="o">{</span>
    <span class="k">if</span> <span class="o">(</span><span class="k">this</span> <span class="o">==</span> <span class="n">unit</span><span class="o">)</span> <span class="o">{</span>
      <span class="k">return</span> <span class="mi">1</span><span class="o">;</span> <span class="c1">// 동등 변환율</span>
    <span class="o">}</span>
    <span class="c1">// ... 이하 생략</span>
  <span class="o">}</span>
<span class="o">}</span>

<span class="c1">// to - be</span>
<span class="kd">enum</span> <span class="nc">SmallDistanceUnit</span><span class="o">{</span>
  <span class="no">CENTIMETER</span><span class="o">,</span> <span class="no">INCH</span><span class="o">;</span>

  <span class="kd">static</span> <span class="kd">final</span> <span class="kt">int</span> <span class="no">IDENTITY</span> <span class="o">=</span> <span class="mi">1</span><span class="o">;</span>

  <span class="kt">double</span> <span class="nf">getConversionRate</span><span class="o">(</span><span class="nc">SmallDistanceUnit</span> <span class="n">unit</span><span class="o">)</span> <span class="o">{</span>
    <span class="k">if</span> <span class="o">(</span><span class="k">this</span> <span class="o">==</span> <span class="n">unit</span><span class="o">)</span> <span class="o">{</span>
      <span class="k">return</span> <span class="no">IDENTITY</span><span class="o">;</span>
    <span class="o">}</span>
    <span class="c1">// ... 이하 생략</span>
  <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<ul>
  <li>주석대신 코드 자체로 매직 넘버에 의미를 부여할 수 있다.</li>
  <li>주석은 시간이 지나도 변하지 않을 위험성을 내포한다.
    <ul>
      <li>주석에 코드만큼 엄격하지 않기 떄문에 시간이 흘러 코드내용과 주석이 달라질 수 있다.</li>
      <li>코드에 의미를 부여하자.</li>
    </ul>
  </li>
</ul>

<h2 id="34-주석을-유틸리티-메서드로-대체">3.4 주석을 유틸리티 메서드로 대체</h2>

<ul>
  <li>예시코드</li>
</ul>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// as - is</span>
<span class="c1">// ... blar blar</span>
<span class="c1">// 정수 백분율로 반올림</span>
<span class="k">return</span> <span class="nc">Math</span><span class="o">.</span><span class="na">toIntExact</span><span class="o">(</span><span class="nc">Math</span><span class="o">.</span><span class="na">round</span><span class="o">(</span><span class="n">averageFuel</span>  <span class="o">*</span> <span class="mi">100</span><span class="o">));</span>

<span class="c1">// to - be</span>

<span class="kt">int</span> <span class="nf">getAverageTankFillingPercent</span><span class="o">()</span> <span class="o">{</span>
<span class="c1">// ... blar blar</span>
  <span class="k">return</span> <span class="nf">roundToIntegerPecent</span><span class="o">(</span><span class="n">averageFuel</span><span class="o">);</span>
<span class="o">}</span>

<span class="kd">static</span> <span class="kt">int</span> <span class="nf">roundToIntegerPecent</span><span class="o">(</span><span class="kt">double</span> <span class="n">value</span><span class="o">)</span> <span class="o">{</span>
  <span class="k">return</span> <span class="nc">Math</span><span class="o">.</span><span class="na">toIntExact</span><span class="o">(</span><span class="nc">Math</span><span class="o">.</span><span class="na">round</span><span class="o">(</span><span class="n">value</span>  <span class="o">*</span> <span class="mi">100</span><span class="o">));</span>
<span class="o">}</span>
</code></pre></div></div>

<ul>
  <li>주석이 필요한 코드를 의미가 분명한 이름을 가진 유틸리티 메서드로 만들어 사용하자.
    <ul>
      <li>코드가 무엇을 하는지 이름만으로 설명할 수 있어 주석을 제거 할 수 있다.</li>
      <li>본 메서드에 줄을 추가 하지 않아도 된다.
        <ul>
          <li>대신 메서드가 늘었지만 각 메서드가 짧아져 이해하기 더 쉬워진다. (가독석 향상)</li>
        </ul>
      </li>
      <li>다른 메서드에서 재사용할 수 있다.</li>
      <li>메서드에 계층구조가 생긴다.
        <ul>
          <li>상위 계층 메서드의 이해도가 개선된다.</li>
        </ul>
      </li>
    </ul>
  </li>
  <li>** 이상적으로 각 메서드는 비슷한 추상화 정도를 갖는, 명명된 명령문의 나열이다.**
    <ul>
      <li>예시코드에선 이러한 맥락에서 평균을 계산하는 코드도 새로운 유틸리티 메서드로 추출할 수 있다.</li>
    </ul>
  </li>
</ul>

<h2 id="35-구현-결정-설명하기">3.5 구현 결정 설명하기</h2>

<ul>
  <li>코딩을 하다보면 여러 구현방법에서 결정(선택)을 해야할 떄가 있다.</li>
  <li>그러할 경우 결정을 하게된 사유에 대한 주석을 아래와 같이 남겨두면 해당 내용의 의사결정에 대해 동료개발자가 이해하기 쉬워진다</li>
</ul>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cm">/**
 * In the context of [USE CASE],  [사용 사례]의 맥락에서
 * facing [CONCERN]               직면하는 [우려사항]과
 * we decided for [OPTION]        우리가 선택한 [해법]으로
 * to achieve [QUALITY]           얻게 되는 [품질]과
 * accepting [DOWNSIDE]           받아들여야 하는 [단점]
 */</span>
</code></pre></div></div>

<h2 id="36-예제로-설명하기">3.6 예제로 설명하기</h2>

<ul>
  <li>주석만으로 이해하기 어려운 코드의 경우 (가령 복잡한 정규식) 간단한 예제 코드를 작성해 준다</li>
</ul>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// as - is</span>
<span class="kd">class</span> <span class="nc">Supply</span> <span class="o">{</span>
  <span class="cm">/**
   * 아래 코드는 어디서든 재고를 식별한다
   * S로 시작해 숫자 다섯자리 재고 번호가 나오고
   * 뒤이어 앞의 재고 번호화 구분하기 위한 역 슬래시가 나오고
   * 국가 코드가 나오는 엄격한 형식을 따른다.
   * 국가 코드는 반드시 참여 국가인 (US, EU, RU, CN) 중
   * 하나를 뜻하는 대문자 두 개 여야한다.
   * 이어서 마침표와 실제 재고명이 소문자로 나온다
   */</span>
   <span class="kd">static</span> <span class="kd">final</span> <span class="nc">Pattern</span> <span class="no">CODE</span> <span class="o">=</span> <span class="nc">Pattern</span><span class="o">.</span><span class="na">compile</span><span class="o">(</span><span class="s">"^S\\d{5}\\\\(US|EU|RU|CN)\\.[a-z]+$"</span><span class="o">);</span>
<span class="o">}</span>
<span class="c1">// to - be</span>
<span class="kd">class</span> <span class="nc">Supply</span> <span class="o">{</span>
  <span class="cm">/**
   * 아래 코드는 어디서든 재고를 식별한다
   *
   * 형식: "S&lt;inventory-number&gt;\&lt;COUNTRY-CODE&gt;.&lt;name&gt;"
   *
   * 유효한 예: "S12345\US.pasta", "S08342\CN.wrench",.....
   *
   * 유효하지 않은 예:
   * "R12345\RU.fuel"   (재고가 아닌 자원)
   * "S1234\US.light"   (숫자가 다섯 개여야 함)
   * "S01234\AI.coconut" (잘못된 국가 코드. US, EU, RU, CN 중 하나를 사용한다.)
   */</span>
   <span class="kd">static</span> <span class="kd">final</span> <span class="nc">Pattern</span> <span class="no">CODE</span> <span class="o">=</span> <span class="nc">Pattern</span><span class="o">.</span><span class="na">compile</span><span class="o">(</span><span class="s">"^S\\d{5}\\\\(US|EU|RU|CN)\\.[a-z]+$"</span><span class="o">);</span>
<span class="o">}</span>
</code></pre></div></div>

<ul>
  <li>주석이 전보다 더 구조적이고 정보도 더 많이 제공한다.</li>
  <li>유효한 예제는 일반적으로 표현식을 한번에 이해할 수 있게 해준다.</li>
</ul>

<h2 id="37-패키지를-javadoc으로-구조화하기">3.7 패키지를 JavaDoc으로 구조화하기</h2>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// as - is</span>
<span class="cm">/**
 * logistics 라는 이패키지는 물류(logistics)를 위한 클래스를 포함한다.
 * 이패키지의 inventory 클래스는 화물선에 제품을 선적하고,
 * 변질된 제품은 모두 버릴 수 있다.
 * 이 패키지의 클래스:
 * - Iventory
 * - Supply
 * - Hull
 *
 * @author 아무개
 * @version 1.8
 * @since 1.7
 */</span>
 <span class="kn">package</span> <span class="nn">logistics</span><span class="o">;</span>
</code></pre></div></div>

<ul>
  <li>요약문이나 @version 같이 불피요한 요소를 집어넣지 말자
    <ul>
      <li>패키지 내 클래스 사용법이나 전체 클래스 목록을 알 수 없는 추상적인 요약문은 불필요하다.</li>
      <li>버전이나 작성자같은 정보는 git 과 같은 형상관리도구로 관리되고 있고, 코드로 관리하면 실제 버전과 매번 동기화 하기 불편하다.</li>
    </ul>
  </li>
</ul>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// to - be</span>
<span class="cm">/**
 * 제품 재고를 관리하는 클래스
 *
 * &lt;p&gt;
 * 주요 클래스는 {@link logistics Inventory} 로서 아래를 수행한다.
 * &lt;ul&gt;
 * &lt;li&gt; {@link logistics CargoShip} 으로 선적하고,
 * &lt;li&gt; 변질된 {@link logistics Supply}를 모두 버리고,
 * &lt;li&gt; 이름으로 어떤 {@link logistics Supply}든 찾는다.
 * &lt;/ul&gt;
 *
 * &lt;p&gt;
 * 이 클래스는 제품을 내리고 변질된 제품은 즉시 모두 버릴 수 있게 해준다
 * &lt;pre&gt;
 * Inventory inventory = new Inventory();
 * inventory.stockUp(cargoShip.unload());
 * inventory.disposeContaminatedSupplies();
 * inventory.getContaminatedSupplies().isEmpty(); // true;
 * &lt;/pre&gt;
 */</span>
 <span class="kn">package</span> <span class="nn">logistics</span>
</code></pre></div></div>

<ul>
  <li>영역 세개를 수직 분히라고 불필요한 정보를 없앴다.
    <ul>
      <li>형상관리도구에서 알 수 있는 버전, 작성자 생성일과 같은 정보를 제거.</li>
    </ul>
  </li>
  <li>소개문은 패키지내 클래스로 무엇을 할 수 있는지 짧은 요약을 제공한다</li>
  <li>두번쨰 단락은 패키지 내 주요 클래스로 무엇을 할 수 있는지 설명한다.
    <ul>
      <li>@link 표기를 활용하여 바로 이동할 수 도 있다.</li>
    </ul>
  </li>
  <li>개발자가 즉석에서 바로 사용할 수 있도록 구체적인 예시 제공
    <blockquote>
      <p>훌륭한 패키지 설명서는 이해도에 큰 변화를 불러오며 <br />
패키지내 모든 클래스로의 진입장벽도 낮춘다.</p>
    </blockquote>
  </li>
</ul>

<h2 id="38-클래스와-인터페이스를-javadoc으로-구조화하기">3.8 클래스와 인터페이스를 JavaDoc으로 구조화하기</h2>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// as - is</span>
<span class="cm">/**
 * 이 클래스는 화물선을 나타낸다.
 * 제품의 {@link Stack}를 내릴 수 있고 제품의 {@link Queue}를 실을 수 있으며
 * long타입으로 remainingCapacity를 보여줄 수 있다.
 */</span>
 <span class="kd">interface</span> <span class="nc">CargoShip</span> <span class="o">{</span>
  <span class="nc">Stack</span><span class="o">&lt;</span><span class="nc">Supply</span><span class="o">&gt;</span> <span class="nf">unload</span><span class="o">();</span>
  <span class="nc">Queue</span><span class="o">&lt;</span><span class="nc">Supply</span><span class="o">&gt;</span> <span class="nf">load</span><span class="o">(</span><span class="nc">Queue</span><span class="o">&lt;</span><span class="nc">Supply</span><span class="o">&gt;</span> <span class="n">supplies</span><span class="o">);</span>
  <span class="kt">int</span> <span class="nf">getRemainingCapacity</span><span class="o">();</span>
 <span class="o">}</span>
</code></pre></div></div>

<ul>
  <li>요약문이 단순히 인터페이스명을 반복할 뿐 별다른 역할을 못하고 있다.</li>
  <li>구조화가 덜 되어있다.</li>
  <li>설명에 오류가 있다. class(x) -&gt; interface(O)</li>
  <li>상세설명은 인터페이스의 메서드 서명을 되풀이하고 있다.</li>
</ul>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// to - be</span>
<span class="cm">/**
 * 화물선은 용량에 따라 제품을 싣고 내릴 수 있다.
 *
 * &lt;p&gt;
 * 제품은 순차적으로 선적되고 LIFO(last-in-first-out)순으로 내려진다.
 * 화물선은 용량만큼만 제품을 저장할 수 있다.
 * 용량은 절대 음수가 아니다.
 */</span>
 <span class="kd">interface</span> <span class="nc">CargoShip</span> <span class="o">{</span>
  <span class="nc">Stack</span><span class="o">&lt;</span><span class="nc">Supply</span><span class="o">&gt;</span> <span class="nf">unload</span><span class="o">();</span>
  <span class="nc">Queue</span><span class="o">&lt;</span><span class="nc">Supply</span><span class="o">&gt;</span> <span class="nf">load</span><span class="o">(</span><span class="nc">Queue</span><span class="o">&lt;</span><span class="nc">Supply</span><span class="o">&gt;</span> <span class="n">supplies</span><span class="o">);</span>
  <span class="kt">int</span> <span class="nf">getRemainingCapacity</span><span class="o">();</span>
 <span class="o">}</span>
</code></pre></div></div>

<ul>
  <li>최상단 요약문이 단순히 인터페이스명을 반복하지 않고 유용한 조언을 제공한다.</li>
  <li>이어지는 설명도 후입선출법 사용과 같은 동작을 더 상세히 설명하고 있다.</li>
  <li>인터페이스를 호출할 때 capacity에 대해 보장하는 두 가지 조건도 명시한다.
    <ul>
      <li>항상참. -&gt; 조건불변 (invariant) 이라고 부른다.</li>
    </ul>
  </li>
</ul>

<h2 id="39-메서드를-javadoc으로-구조화하기">3.9 메서드를 JavaDoc으로 구조화하기</h2>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// as - is</span>
<span class="kd">interface</span> <span class="nc">CargoShip</span> <span class="o">{</span>
  <span class="nc">Stack</span><span class="o">&lt;</span><span class="nc">Supply</span><span class="o">&gt;</span> <span class="nf">unload</span><span class="o">();</span>
  <span class="cm">/**
  * {@link Supply} 를 싣는다.
  *
  * @param {@link Queue} 타입의 제품제공
  * @return {@link Queue} 타입의 적재되지 않은 제품
  */</span>
  <span class="nc">Queue</span><span class="o">&lt;</span><span class="nc">Supply</span><span class="o">&gt;</span> <span class="nf">load</span><span class="o">(</span><span class="nc">Queue</span><span class="o">&lt;</span><span class="nc">Supply</span><span class="o">&gt;</span> <span class="n">supplies</span><span class="o">);</span>

  <span class="kt">int</span> <span class="nf">getRemainingCapacity</span><span class="o">();</span>
<span class="o">}</span>
</code></pre></div></div>

<ul>
  <li>요약문과 @link 표기가 유용한 정보를 제공하고 있지 않다.</li>
  <li>@param/@return 은 새로운 내용 없이 메소드 내용만 반복하고 있다.
    <ul>
      <li>ex) Queue 인스턴스 대신 null 을 전달 할 경우 어떻게 될지 알 수 없다.</li>
      <li>메서드가 어떻게 동작할 지 예측하기 어렵다.</li>
    </ul>
  </li>
</ul>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// to - be</span>
<span class="kd">interface</span> <span class="nc">CargoShip</span> <span class="o">{</span>
  <span class="nc">Stack</span><span class="o">&lt;</span><span class="nc">Supply</span><span class="o">&gt;</span> <span class="nf">unload</span><span class="o">();</span>
  <span class="cm">/**
   * 제품을 화물선에 싣는다
   *
   * &lt;p&gt;
   * 남은 용량만큼만 제품을 싣게 해준다
   *
   * 예:
   * &lt;pre&gt;
   * int capacity = cargoShip.getRemainingCapacity(); // 1
   * Queue&amp;lt;Supply&gt; supplies = Arrays.asList(new Supply("Apple"));
   * Queue&amp;lt;Supply&gt; spareSupplies = cargoShip.load(supplies);
   * spareSupplies.isEmpty(); // 참
   * cargoShip.getRemainingCapacity() == 0; // 참
   * &lt;/pre&gt;
   *
   * @param 적재할 제품; 널이면 안 된다.
   * @return 용량이 작아 실을 수 없었던 제품;
   *          모두 실었다면 empty
   * @throws 제품이 널이면 NullPointerException
   * @see CargoShip#getRemainingCapacity() 용량을 확인하는 함수
   * @see CargoShip#unload() 제품을 내리는 함수
   */</span>
  <span class="nc">Queue</span><span class="o">&lt;</span><span class="nc">Supply</span><span class="o">&gt;</span> <span class="nf">load</span><span class="o">(</span><span class="nc">Queue</span><span class="o">&lt;</span><span class="nc">Supply</span><span class="o">&gt;</span> <span class="n">supplies</span><span class="o">);</span>

  <span class="kt">int</span> <span class="nf">getRemainingCapacity</span><span class="o">();</span>
<span class="o">}</span>
</code></pre></div></div>

<ul>
  <li>입력과 내부 상태가 특정 출력과 상태변경을 어떻게 보장하는지 명시한다.</li>
  <li><code class="language-plaintext highlighter-rouge">&lt;pre&gt;</code>는 xml 환경이므로 <code class="language-plaintext highlighter-rouge">&lt;pre&gt;</code> 내 <code class="language-plaintext highlighter-rouge">&lt;</code> 문자를 <code class="language-plaintext highlighter-rouge">&amp;lt;</code>로 탈출시킴.</li>
  <li>null과 같이 유효하지 않은 입력까지도 @param 설명에 명시함.
    <ul>
      <li>NullPotinterException을 @throws 한다고 언급해줌</li>
    </ul>
  </li>
  <li>@see 표기로 다른 메서드도 참조.
    <ul>
      <li>메서드가 일으킨 효과를 되돌리는 방법이나 메서드 호출로 야기된 상태 변화를 관찰할 수 있는 방법을 설명한다.</li>
    </ul>
  </li>
</ul>

<h2 id="310-생성자를-javadoc으로-구조화하기">3.10 생성자를 JavaDoc으로 구조화하기</h2>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// as - is</span>
<span class="kd">class</span> <span class="nc">Inventory</span> <span class="o">{</span>
  <span class="nc">List</span><span class="o">&lt;</span><span class="nc">Supply</span><span class="o">&gt;</span> <span class="n">supplies</span><span class="o">;</span>
  <span class="cm">/**
   * 새 Inventory의 생성자
   */</span>
   <span class="nc">Inventory</span><span class="o">()</span> <span class="o">{</span>
    <span class="k">this</span><span class="o">(</span><span class="k">new</span> <span class="nc">ApprayList</span><span class="o">&lt;&gt;());</span>
   <span class="o">}</span>

   <span class="cm">/**
    * 새 Inventory의 또 다른 생성자
    *
    * 제품을 Inventory에 추가할 수 있는 생성자
    */</span>
    <span class="nc">Inventory</span><span class="o">(</span><span class="nc">Collection</span><span class="o">&lt;</span><span class="nc">Supply</span><span class="o">&gt;</span> <span class="n">initialSupplies</span><span class="o">)</span> <span class="o">{</span>
      <span class="k">this</span><span class="o">.</span><span class="na">supplies</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">ArrayList</span><span class="o">&lt;&gt;(</span><span class="n">initialSupplies</span><span class="o">);</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<ul>
  <li>요약문은 새로운 정보를 전달하지 않고 있다.</li>
  <li>두번쨰 생성자의 두번쨰 요약문도 핵심에서 벗어나 있다
    <ul>
      <li>supplies를 정확히 어떻게 추가하는지 알 수 없다</li>
    </ul>
  </li>
  <li>두 생성자의 관계도 추론 할 수 없다.
    <ul>
      <li>일반적으로 외부 클래스를 사용할 때는 소스코드보다 javaDoc에 더 활용하게 된다.</li>
      <li>생성자의 javaDoc 주석은 프로그래머가 생성자를 사용하는 데 필요한 모든 요소를 설명해야한다.</li>
    </ul>
  </li>
</ul>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// to - be</span>
<span class="kd">class</span> <span class="nc">Inventory</span> <span class="o">{</span>
  <span class="nc">List</span><span class="o">&lt;</span><span class="nc">Supply</span><span class="o">&gt;</span> <span class="n">supplies</span><span class="o">;</span>

  <span class="cm">/**
   * 빈 재고를 생성한다
   * @see Inventory#Inventory(Collection) 초기 제품을 초기화하는 함수
   */</span>
   <span class="nc">Inventory</span><span class="o">()</span> <span class="o">{</span>
    <span class="k">this</span><span class="o">(</span><span class="k">new</span> <span class="nc">ApprayList</span><span class="o">&lt;&gt;());</span>
   <span class="o">}</span>

   <span class="cm">/**
    * 제품을 처음으로 선적한 재고를 생성한다
    *
    * @param initialSupplies 제품을 초기화한다.
    *                         null 이면 안되고 빌 수 있다.
    * @throws NullPointerException initialSupplies 가 null일 때
    * @see Inventory#Inventory() 제품없이 초기화하는 함수
    */</span>
    <span class="nc">Inventory</span><span class="o">(</span><span class="nc">Collection</span><span class="o">&lt;</span><span class="nc">Supply</span><span class="o">&gt;</span> <span class="n">initialSupplies</span><span class="o">)</span> <span class="o">{</span>
      <span class="k">this</span><span class="o">.</span><span class="na">supplies</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">ArrayList</span><span class="o">&lt;&gt;(</span><span class="n">initialSupplies</span><span class="o">);</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<ul>
  <li>무엇보다 중요한정보는 <strong><code class="language-plaintext highlighter-rouge">생성자를 올바르게 호출하는 방법</code></strong>
    <ul>
      <li>어떤 전제조건을 충족해야하는지 설명을 해야한다.</li>
      <li>예제에서는 null 일경우 @throws 하는 부분을 명시함.</li>
    </ul>
  </li>
  <li>두 번쨰 생성자 종료 후 객체 상태 정보를 알아야함.
    <ul>
      <li>상태에 따라 그 시점에서 호출할 수 있는 메서드가 결정된다.
        <ul>
          <li>사후 조건 <strong><code class="language-plaintext highlighter-rouge">(postcondition)</code></strong></li>
        </ul>
      </li>
    </ul>
  </li>
  <li>@see 표기는 개발자에게 힌트를 준다.
    <ul>
      <li>알려주지 않았다면 모를 대안을 알려준다.</li>
      <li>예제에서는 두 표기를 통해 두 생성자의 관계를 밝힌다.</li>
    </ul>
  </li>
</ul>]]></content><author><name>두식</name></author><category term="도서" /><category term="자바코딩의_기술" /><summary type="html"><![CDATA[3장 슬기롭게 주석 사용하기]]></summary></entry><entry><title type="html">2장 코드스타일 레벨 업</title><link href="http://localhost:4000/%EB%8F%84%EC%84%9C/%EC%9E%90%EB%B0%94%EC%BD%94%EB%94%A9%EC%9D%98_%EA%B8%B0%EC%88%A0/java_coding_skill_chapter2/" rel="alternate" type="text/html" title="2장 코드스타일 레벨 업" /><published>2022-09-28T15:12:35+09:00</published><updated>2022-09-28T15:12:35+09:00</updated><id>http://localhost:4000/%EB%8F%84%EC%84%9C/%EC%9E%90%EB%B0%94%EC%BD%94%EB%94%A9%EC%9D%98_%EA%B8%B0%EC%88%A0/java_coding_skill_chapter2</id><content type="html" xml:base="http://localhost:4000/%EB%8F%84%EC%84%9C/%EC%9E%90%EB%B0%94%EC%BD%94%EB%94%A9%EC%9D%98_%EA%B8%B0%EC%88%A0/java_coding_skill_chapter2/"><![CDATA[<h1 id="2장-코드스타일-레벨-업">2장 코드스타일 레벨 업</h1>

<blockquote>
  <p>바보도 컴퓨터가 이해하는 코드는 작성할 수 있다<br />
훌륭한 프로그래머는 인간이 이해하는 코드를 작성한다.</p>
</blockquote>

<h2 id="21-매직-넘버를-상수로-대체">2.1 매직 넘버를 상수로 대체</h2>

<h3 id="매직넘버가-난무하면-코드를-이해하기-어려워-지고-휴먼에러를-발생시킬-소지가-생긴다">매직넘버가 난무하면 코드를 이해하기 어려워 지고 휴먼에러를 발생시킬 소지가 생긴다.</h3>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">class</span> <span class="nc">CruiseControl</span> <span class="o">{</span>
  <span class="kd">private</span> <span class="kt">double</span> <span class="n">targetSpeedKmh</span><span class="o">;</span>

  <span class="kt">void</span> <span class="nf">setPreset</span><span class="o">(</span><span class="kt">int</span> <span class="n">speedPreset</span><span class="o">)</span> <span class="o">{</span>
    <span class="k">if</span> <span class="o">(</span><span class="n">speedPreset</span> <span class="o">==</span> <span class="mi">2</span><span class="o">)</span> <span class="o">{</span> <span class="c1">// 표면상의 의미는 없지만 프로그램을 제어하는 숫자.</span>
      <span class="n">setTargetSpeedKmh</span><span class="o">(</span><span class="mi">16944</span><span class="o">);</span>
    <span class="o">}</span>  <span class="k">else</span> <span class="k">if</span> <span class="o">(</span><span class="n">speedPreset</span> <span class="o">==</span> <span class="mi">1</span><span class="o">)</span> <span class="o">{</span> <span class="c1">// 일명 '매직 넘버'</span>
      <span class="n">setTargetSpeedKmh</span><span class="o">(</span><span class="mi">7667</span><span class="o">);</span>
    <span class="o">}</span> <span class="k">else</span> <span class="k">if</span> <span class="o">(</span><span class="n">speedPreset</span> <span class="o">==</span> <span class="mi">0</span><span class="o">)</span> <span class="o">{</span>
      <span class="n">setTargetSpeedKmh</span><span class="o">(</span><span class="mi">0</span><span class="o">);</span>
    <span class="o">}</span>
  <span class="o">}</span>

  <span class="kt">void</span> <span class="nf">setTargetSpeedKmh</span><span class="o">(</span><span class="kt">double</span> <span class="n">speed</span><span class="o">)</span> <span class="o">{</span>
    <span class="n">targetSpeedKmh</span> <span class="o">=</span> <span class="n">speed</span><span class="o">;</span>
  <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">static</span> <span class="kd">final</span>  <span class="kt">int</span> <span class="no">STOP_PRESET</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>
<span class="kd">static</span> <span class="kd">final</span>  <span class="kt">int</span> <span class="no">PLANETARY_SPEED_PRESET</span> <span class="o">=</span> <span class="mi">1</span><span class="o">;</span>
<span class="kd">static</span> <span class="kd">final</span>  <span class="kt">int</span> <span class="no">CURISE_SPEED_PRESET</span> <span class="o">=</span> <span class="mi">2</span><span class="o">;</span>

<span class="kd">static</span> <span class="kd">final</span>  <span class="kt">int</span> <span class="no">CRUISE_SPEED_KMH</span> <span class="o">=</span> <span class="mi">16944</span><span class="o">;</span>
<span class="kd">static</span> <span class="kd">final</span>  <span class="kt">int</span> <span class="no">PLANET_SPEED_KMH</span> <span class="o">=</span> <span class="mi">7667</span><span class="o">;</span>
<span class="kd">static</span> <span class="kd">final</span>  <span class="kt">int</span> <span class="no">STOP_SPEED_KMH</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>

<span class="kd">private</span> <span class="kt">double</span> <span class="n">targetSpeedKmh</span><span class="o">;</span>

<span class="kt">void</span> <span class="nf">setPreset</span><span class="o">(</span><span class="kt">int</span> <span class="n">speedPreset</span><span class="o">)</span> <span class="o">{</span>
  <span class="k">if</span> <span class="o">(</span><span class="n">speedPreset</span> <span class="o">==</span> <span class="no">CURISE_SPEED_PRESET</span><span class="o">)</span> <span class="o">{</span> <span class="c1">// 매직넘버를 제거후 유의미한 이름을 적용한 상수사용</span>
    <span class="n">setTargetSpeedKmh</span><span class="o">(</span><span class="no">CRUISE_SPEED_KMH</span><span class="o">);</span>
  <span class="o">}</span> <span class="k">else</span> <span class="k">if</span> <span class="o">(</span><span class="n">speedPreset</span> <span class="o">==</span> <span class="no">PLANETARY_SPEED_PRESET</span><span class="o">)</span> <span class="o">{</span>
    <span class="n">setTargetSpeedKmh</span><span class="o">(</span><span class="no">PLANET_SPEED_KMH</span><span class="o">);</span>
  <span class="o">}</span> <span class="k">else</span> <span class="o">.....</span>
  <span class="o">...</span>
<span class="o">}</span>
</code></pre></div></div>

<h2 id="22-정수-상수-대신-열거형">2.2 정수 상수 대신 열거형</h2>

<h3 id="정수상수를-매직넘버로-대체했어도-유효하지않은-값을-거절하도록-강제할-수는-없다">정수상수를 매직넘버로 대체했어도, 유효하지않은 값을 거절하도록 강제할 수는 없다.</h3>

<p>-</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">class</span> <span class="nc">CruiseControl</span> <span class="o">{</span>
  <span class="kd">private</span> <span class="kt">double</span> <span class="n">targetSpeedKmh</span><span class="o">;</span>

  <span class="kt">void</span> <span class="nf">setPreset</span><span class="o">(</span><span class="kt">int</span> <span class="n">speedPreset</span><span class="o">)</span> <span class="o">{</span>
    <span class="nc">Objects</span><span class="o">.</span><span class="na">requierNonNull</span><span class="o">(</span><span class="n">speedPreset</span><span class="o">);</span>

    <span class="c1">// enunm을 사용함으로써 분기가 사라지고 코드가 더 간결해짐.</span>
    <span class="c1">// 유효하지 않은 값이 들어오는것을 차단함.</span>
    <span class="n">setTargetSpeedKmh</span><span class="o">(</span><span class="n">speedPreset</span><span class="o">.</span><span class="na">speedKmh</span><span class="o">);</span>
  <span class="o">}</span>

  <span class="kt">void</span> <span class="nf">setTargetSpeedKmh</span><span class="o">(</span><span class="kt">double</span> <span class="n">speedKmh</span><span class="o">)</span> <span class="o">{</span>
    <span class="n">targetSpeedKmh</span> <span class="o">=</span> <span class="n">speedKmh</span><span class="o">;</span>
  <span class="o">}</span>
<span class="o">}</span>

<span class="c1">// enum 객체를 만들어 상수를 대체.</span>
<span class="kd">enum</span> <span class="nc">SpeedPreset</span> <span class="o">{</span>
  <span class="no">STOP</span><span class="o">(</span><span class="mi">0</span><span class="o">),</span> <span class="no">PLANETARY_SPEED</span><span class="o">(</span><span class="mi">7667</span><span class="o">),</span> <span class="no">CRUISE_SPEED</span><span class="o">(</span><span class="mi">16944</span><span class="o">)</span>

  <span class="kd">final</span> <span class="kt">double</span> <span class="n">speedKmh</span><span class="o">;</span>

  <span class="nc">SpeedPreset</span><span class="o">(</span><span class="kt">double</span> <span class="n">speedkmh</span><span class="o">)</span> <span class="o">{</span>
    <span class="k">this</span><span class="o">.</span><span class="na">speedKmh</span> <span class="o">=</span> <span class="n">speedKmh</span><span class="o">;</span>
  <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<h2 id="23-for-루프-대신-for-each">2.3 For 루프 대신 For-Each</h2>

<ul>
  <li>예시코드</li>
</ul>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// as - is</span>
<span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">checks</span><span class="o">.</span><span class="na">size</span><span class="o">();</span> <span class="n">i</span><span class="o">++</span> <span class="o">)</span> <span class="o">{</span>
  <span class="c1">// blar blar</span>
<span class="o">}</span>

<span class="c1">// to - be</span>
<span class="k">for</span> <span class="o">(</span><span class="nc">String</span> <span class="n">check</span> <span class="o">:</span> <span class="n">checks</span> <span class="o">)</span> <span class="o">{</span> <span class="c1">// 단수명 : 복수명 형태로 지어주면 Good</span>
  <span class="c1">// blar blar</span>
<span class="o">}</span>
</code></pre></div></div>

<ul>
  <li>개발자가 사용하지 않는 index에 대해 고민할 필요가 없다
    <ul>
      <li><code class="language-plaintext highlighter-rouge">indexOutOfBoundsExceptions</code> 와 같은 휴먼에러 방지 가능.</li>
      <li>로직이 좀 더 안전하고 이해하기 쉬워진다.</li>
    </ul>
  </li>
</ul>

<h2 id="24-순회하며-컬렉션-수정하지-않기">2.4 순회하며 컬렉션 수정하지 않기</h2>

<ul>
  <li>예시 코드</li>
</ul>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// as - is</span>
<span class="k">for</span> <span class="o">(</span><span class="nc">Supply</span> <span class="n">supply</span> <span class="o">:</span> <span class="n">supplies</span><span class="o">)</span> <span class="o">{</span>
  <span class="k">if</span> <span class="o">(</span><span class="n">supply</span><span class="o">.</span><span class="na">isContaminated</span><span class="o">())</span> <span class="o">{</span>
    <span class="n">supplies</span><span class="o">.</span><span class="na">remove</span><span class="o">(</span><span class="n">supply</span><span class="o">);</span>  <span class="c1">// ConcurrentModificationException 발생 위험</span>
  <span class="o">}</span>
<span class="o">}</span>

<span class="c1">// to - be</span>
<span class="nc">Iterator</span><span class="o">&lt;</span><span class="nc">Supply</span><span class="o">&gt;</span> <span class="n">iterator</span> <span class="o">=</span> <span class="n">supplies</span><span class="o">.</span><span class="na">iterator</span><span class="o">();</span>
<span class="k">while</span> <span class="o">(</span><span class="n">iterator</span><span class="o">.</span><span class="na">hasNext</span><span class="o">())</span> <span class="o">{</span>
  <span class="k">if</span> <span class="o">(</span><span class="n">iterator</span><span class="o">.</span><span class="na">next</span><span class="o">().</span><span class="na">isContamiated</span><span class="o">())</span> <span class="o">{</span>
    <span class="n">iterator</span><span class="o">.</span><span class="na">remove</span><span class="o">();</span>
  <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<ol>
  <li>해결법 1
    <ul>
      <li>리스트를 순회하며 변질된 제품을 찾고 그 후 발견한 제품을 제거.</li>
    </ul>
  </li>
  <li>해결법 2
    <ul>
      <li>iterator , while 사용</li>
      <li>Iterator는 첫 번쨰 원소 부터 리스트내 원소를 가리키는 포인터처럼 동작함.
        <ul>
          <li>hasNext로 원소가 남아있는지 묻고 next로 다음원소를 얻어 처리한다.</li>
        </ul>
      </li>
    </ul>
  </li>
  <li>해결법 3</li>
</ol>

<ul>
  <li>자바 8부터 람다를 이용하여 Collection.removeIf() 같은 메서드를 사용하여 2번과 비슷한 효과를 얻을 수 있다.</li>
</ul>

<h2 id="25-순회하며-계산-집약적-연산-하지-않기">2.5 순회하며 계산 집약적 연산 하지 않기</h2>

<ul>
  <li>예시코드</li>
</ul>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// as - is</span>
<span class="nc">List</span><span class="o">&lt;</span><span class="nc">Supply</span><span class="o">&gt;</span> <span class="n">result</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">LinkedList</span><span class="o">&lt;&gt;();</span>
<span class="k">for</span> <span class="o">(</span><span class="nc">Supply</span> <span class="n">supply</span> <span class="o">:</span> <span class="n">supplies</span><span class="o">)</span> <span class="o">{</span>
  <span class="c1">// 계산집약적 연산은 성능에 이슈를 초래 할 수 있다</span>
  <span class="k">if</span> <span class="o">(</span><span class="nc">Pattern</span><span class="o">.</span><span class="na">matches</span><span class="o">(</span><span class="n">regex</span><span class="o">,</span> <span class="n">supply</span><span class="o">.</span><span class="na">toString</span><span class="o">())</span> <span class="o">{</span> <span class="c1">// 반복할떄마다 컴파일함.</span>
    <span class="n">result</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">supply</span><span class="o">);</span>
  <span class="o">}</span>
<span class="o">}</span>
<span class="k">return</span> <span class="n">result</span><span class="o">;</span>

<span class="c1">// to - be</span>
<span class="nc">List</span><span class="o">&lt;</span><span class="nc">Supply</span><span class="o">&gt;</span> <span class="n">result</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">LinkedList</span><span class="o">&lt;&gt;();</span>
<span class="c1">// 반복해서 성능저하 시킬요인은 루프 밖으로 뺸다.</span>
<span class="nc">Pattern</span> <span class="n">pattern</span> <span class="o">=</span> <span class="nc">Pattern</span><span class="o">.</span><span class="na">compile</span><span class="o">(</span><span class="n">regex</span><span class="o">);</span> <span class="c1">// 컴파일은 한번만함.</span>
<span class="k">for</span> <span class="o">(</span><span class="nc">Supply</span> <span class="n">supply</span> <span class="o">:</span> <span class="n">supplies</span><span class="o">)</span> <span class="o">{</span>
  <span class="c1">// 컴파일된 표현식 실행. 가볍다.</span>
  <span class="k">if</span> <span class="o">(</span><span class="n">pattern</span><span class="o">.</span><span class="na">matcher</span><span class="o">(</span><span class="n">supply</span><span class="o">.</span><span class="na">toString</span><span class="o">()).</span><span class="na">matches</span><span class="o">())</span> <span class="o">{</span>
    <span class="n">result</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">supply</span><span class="o">);</span>
  <span class="o">}</span>
<span class="o">}</span>
<span class="k">return</span> <span class="n">result</span><span class="o">;</span>
</code></pre></div></div>

<ul>
  <li>루프안에서 성능저하가 발생할 요인을 가능하면 루프밖으로 뺴자.</li>
</ul>

<h2 id="26-새-줄로-그루핑">2.6 새 줄로 그루핑</h2>

<ul>
  <li>에시코드</li>
</ul>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// as - is</span>
<span class="kd">enum</span> <span class="nc">DistanceUnit</span> <span class="o">{</span>
  <span class="no">MILES</span><span class="o">,</span> <span class="no">KILOMETERS</span><span class="o">;</span>

  <span class="c1">// 의미와 역할과 상관없이 코드 블럭이 붙어있다.</span>
  <span class="kd">static</span> <span class="kd">final</span> <span class="kt">double</span> <span class="no">MILE_IN_KILOMETERS</span> <span class="o">=</span> <span class="mf">1.60934</span><span class="o">;</span>
  <span class="kd">static</span> <span class="kd">final</span> <span class="kt">int</span> <span class="no">IDENTITY</span> <span class="o">=</span> <span class="mi">1</span><span class="o">;</span>
  <span class="kd">static</span> <span class="kd">final</span> <span class="kt">double</span> <span class="no">KILOMETER_IN_MILES</span> <span class="o">=</span> <span class="mi">1</span> <span class="o">/</span> <span class="no">MILE_IN_KILOMETERS</span><span class="o">;</span>

  <span class="kt">double</span> <span class="nf">getConversionRate</span><span class="o">(</span><span class="nc">DistanceUnit</span> <span class="n">unit</span><span class="o">)</span> <span class="o">{</span>
    <span class="k">if</span> <span class="o">(</span><span class="k">this</span> <span class="o">==</span> <span class="n">unit</span><span class="o">)</span> <span class="o">{</span>
      <span class="k">return</span> <span class="no">IDENTITY</span><span class="o">;</span>
    <span class="o">}</span> <span class="c1">// if 문도 붙어있다. 하나의 블럭 처럼 읽힘.</span>
    <span class="k">if</span> <span class="o">(</span><span class="k">this</span> <span class="o">==</span> <span class="no">MILES</span> <span class="o">&amp;&amp;</span> <span class="n">unit</span> <span class="o">==</span> <span class="no">KILOMETERS</span><span class="o">)</span> <span class="o">{</span>
      <span class="k">return</span> <span class="no">MILE_IN_KILOMETERS</span><span class="o">;</span>
    <span class="o">}</span> <span class="k">else</span> <span class="o">{</span>
      <span class="k">return</span> <span class="no">KILOMETER_IN_MILES</span><span class="o">;</span>
    <span class="o">}</span>
  <span class="o">}</span>
<span class="o">}</span>

<span class="c1">// to - be</span>
<span class="kd">enum</span> <span class="nc">DistanceUnit</span> <span class="o">{</span>
  <span class="no">MILES</span><span class="o">,</span> <span class="no">KILOMETERS</span><span class="o">;</span>

  <span class="c1">// 연관된 코드끼리 새 줄로 구분함</span>
  <span class="kd">static</span> <span class="kd">final</span> <span class="kt">int</span> <span class="no">IDENTITY</span> <span class="o">=</span> <span class="mi">1</span><span class="o">;</span>

  <span class="kd">static</span> <span class="kd">final</span> <span class="kt">double</span> <span class="no">MILE_IN_KILOMETERS</span> <span class="o">=</span> <span class="mf">1.60934</span><span class="o">;</span>
  <span class="kd">static</span> <span class="kd">final</span> <span class="kt">double</span> <span class="no">KILOMETER_IN_MILES</span> <span class="o">=</span> <span class="mi">1</span> <span class="o">/</span> <span class="no">MILE_IN_KILOMETERS</span><span class="o">;</span>

  <span class="kt">double</span> <span class="nf">getConversionRate</span><span class="o">(</span><span class="nc">DistanceUnit</span> <span class="n">unit</span><span class="o">)</span> <span class="o">{</span>
    <span class="k">if</span> <span class="o">(</span><span class="k">this</span> <span class="o">==</span> <span class="n">unit</span><span class="o">)</span> <span class="o">{</span>
      <span class="k">return</span> <span class="no">IDENTITY</span><span class="o">;</span>
    <span class="o">}</span>

    <span class="k">if</span> <span class="o">(</span><span class="k">this</span> <span class="o">==</span> <span class="no">MILES</span> <span class="o">&amp;&amp;</span> <span class="n">unit</span> <span class="o">==</span> <span class="no">KILOMETERS</span><span class="o">)</span> <span class="o">{</span> <span class="c1">// 성격이 다른분기를 새줄로 구분함.</span>
      <span class="k">return</span> <span class="no">MILE_IN_KILOMETERS</span><span class="o">;</span>
    <span class="o">}</span> <span class="k">else</span> <span class="o">{</span>
      <span class="k">return</span> <span class="no">KILOMETER_IN_MILES</span><span class="o">;</span>
    <span class="o">}</span>
  <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<ul>
  <li>코드블럭이 붙어있으면 한덩어리로 인식이 되기 쉽다.
    <ul>
      <li>별개의 블륵을 새 줄로 분리하면 가독성을 향상 시킬 수 있다.</li>
    </ul>
  </li>
</ul>

<h2 id="27-이어붙이기-대신-서식화">2.7 이어붙이기 대신 서식화</h2>

<ul>
  <li>예시코드</li>
</ul>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// as - is</span>
<span class="nc">String</span> <span class="n">entry</span> <span class="o">=</span> <span class="n">author</span><span class="o">.</span><span class="na">toUpperCase</span><span class="o">()</span> <span class="o">+</span> <span class="s">": ["</span> <span class="o">+</span> <span class="n">formattedMonth</span> <span class="o">+</span> <span class="s">"-"</span>
  <span class="o">+</span> <span class="n">today</span><span class="o">.</span><span class="na">getDayOfMonth</span><span class="o">()</span> <span class="o">+</span> <span class="s">"-"</span> <span class="o">+</span> <span class="n">today</span><span class="o">.</span><span class="na">getYear</span><span class="o">()</span> <span class="o">+</span> <span class="s">"](Day "</span>
  <span class="o">+</span> <span class="o">(</span><span class="nc">ChronoUnit</span><span class="o">.</span><span class="na">DAYS</span><span class="o">.</span><span class="na">between</span><span class="o">(</span><span class="n">start</span><span class="o">,</span> <span class="n">today</span><span class="o">)</span> <span class="o">+</span> <span class="mi">1</span><span class="o">)</span> <span class="o">+</span> <span class="s">")&gt; "</span>
  <span class="o">+</span> <span class="n">message</span> <span class="o">+</span> <span class="nc">System</span><span class="o">.</span><span class="na">lineSeparator</span><span class="o">();</span>

<span class="c1">// to - be</span>
<span class="nc">String</span> <span class="n">entry</span> <span class="o">=</span> <span class="nc">String</span><span class="o">.</span><span class="na">format</span><span class="o">(</span><span class="s">"$S: [%tm-%&lt;te-%&lt;tY](Day %d)&gt; %s%n"</span><span class="o">,</span> <span class="n">author</span><span class="o">,</span> <span class="n">today</span><span class="o">,</span> <span class="nc">ChronoUnit</span><span class="o">.</span><span class="na">DAYS</span><span class="o">.</span><span class="na">between</span><span class="o">(</span><span class="n">start</span><span class="o">,</span> <span class="n">today</span><span class="o">)</span> <span class="o">+</span> <span class="mi">1</span><span class="o">,</span> <span class="n">message</span><span class="o">);</span>
</code></pre></div></div>

<ul>
  <li>서식문자열의 활용은 가독성을 높여준다.
    <ul>
      <li>어떻게 출력할지와 무엇을 출력할지를 분리하자.</li>
    </ul>
  </li>
</ul>

<h2 id="28-직접만들지-말고-자바-api-사용하기">2.8 직접만들지 말고 자바 API 사용하기</h2>

<ul>
  <li>예시코드</li>
</ul>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// as - is</span>
<span class="kt">int</span> <span class="nf">getQuantity</span><span class="o">(</span><span class="nc">Supply</span> <span class="n">supply</span><span class="o">)</span> <span class="o">{</span>
  <span class="k">if</span> <span class="o">(</span><span class="n">supply</span> <span class="o">==</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
    <span class="k">throw</span> <span class="k">new</span> <span class="nf">NullPointerException</span><span class="o">(</span><span class="s">"blar blar"</span><span class="o">);</span>
  <span class="o">}</span>

  <span class="kt">int</span> <span class="n">quantity</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>
  <span class="k">for</span> <span class="o">(</span><span class="nc">Supply</span> <span class="n">supplyInStock</span> <span class="o">:</span> <span class="n">supplies</span> <span class="o">)</span> <span class="o">{</span>
    <span class="k">if</span> <span class="o">(</span><span class="n">supply</span><span class="o">.</span><span class="na">equals</span><span class="o">(</span><span class="n">supplyInStock</span><span class="o">)){</span>
      <span class="n">quantity</span><span class="o">++;</span>
    <span class="o">}</span>
  <span class="o">}</span>
  <span class="k">return</span> <span class="n">quantity</span><span class="o">;</span>
<span class="o">}</span>

<span class="c1">// to - be</span>
<span class="kt">int</span> <span class="nf">getQuantity</span><span class="o">(</span><span class="nc">Supply</span> <span class="n">supply</span><span class="o">)</span> <span class="o">{</span>
  <span class="nc">Objects</span><span class="o">.</span><span class="na">requireNonNull</span><span class="o">(</span><span class="n">supply</span><span class="o">,</span> <span class="s">"blar blar"</span><span class="o">);</span>
  <span class="k">return</span> <span class="nc">Collecyions</span><span class="o">.</span><span class="na">frequency</span><span class="o">(</span><span class="n">supplies</span><span class="o">,</span> <span class="n">supply</span><span class="o">);</span>
<span class="o">}</span>
</code></pre></div></div>

<ul>
  <li>JAVA API 는 예전과 다르게 방대해졌고, 끊임없이 개선되어가고 있다.
    <ul>
      <li>새로운 기능을 추가하기보다 기존에 잘 만들어져 있는 API 기능을 잘 활용하는게 가독성 면이나 협업에 도움이 된다.</li>
    </ul>
  </li>
</ul>]]></content><author><name>두식</name></author><category term="도서" /><category term="자바코딩의_기술" /><summary type="html"><![CDATA[2장 코드스타일 레벨 업]]></summary></entry><entry><title type="html">1장 우선정리부터</title><link href="http://localhost:4000/%EB%8F%84%EC%84%9C/%EC%9E%90%EB%B0%94%EC%BD%94%EB%94%A9%EC%9D%98_%EA%B8%B0%EC%88%A0/java_coding_skill_chapter1/" rel="alternate" type="text/html" title="1장 우선정리부터" /><published>2022-09-27T16:46:35+09:00</published><updated>2022-09-27T16:46:35+09:00</updated><id>http://localhost:4000/%EB%8F%84%EC%84%9C/%EC%9E%90%EB%B0%94%EC%BD%94%EB%94%A9%EC%9D%98_%EA%B8%B0%EC%88%A0/java_coding_skill_chapter1</id><content type="html" xml:base="http://localhost:4000/%EB%8F%84%EC%84%9C/%EC%9E%90%EB%B0%94%EC%BD%94%EB%94%A9%EC%9D%98_%EA%B8%B0%EC%88%A0/java_coding_skill_chapter1/"><![CDATA[<h1 id="1장-우선정리부터">1장 우선정리부터</h1>

<blockquote>
  <p>바보도 컴퓨터가 이해하는 코드는 작성할 수 있다.<br />
훌륭한 프로그래머는 인간이 이해하는 코드를 작성한다.</p>
</blockquote>

<h2 id="11-쓸모없는-비교-피하기">1.1 쓸모없는 비교 피하기</h2>

<h3 id="bool원시값이나-반환값은-비교를-할-필요가-없다">Bool원시값이나 반환값은 비교를 할 필요가 없다</h3>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// microscope.isInorganic(sample) 의 결과가 Boolean 일 경우</span>
<span class="c1">// as-is</span>
<span class="k">if</span> <span class="o">(</span><span class="n">microscope</span><span class="o">.</span><span class="na">isInorganic</span><span class="o">(</span><span class="n">sample</span><span class="o">)</span> <span class="o">=</span> <span class="kc">true</span><span class="o">)</span> <span class="o">{</span>
  <span class="k">return</span> <span class="nc">Result</span><span class="o">.</span><span class="na">INORGANIC</span><span class="o">;</span>
<span class="o">}</span> <span class="k">else</span> <span class="o">{</span> <span class="cm">/*...*/</span> <span class="o">}</span>

<span class="c1">// to-be</span>
<span class="k">if</span> <span class="o">(</span><span class="n">microscope</span><span class="o">.</span><span class="na">isInorganic</span><span class="o">(</span><span class="n">sample</span><span class="o">))</span> <span class="o">{</span>
  <span class="k">return</span> <span class="nc">Result</span><span class="o">.</span><span class="na">INORGANIC</span><span class="o">;</span>
<span class="o">}</span> <span class="k">else</span> <span class="o">{</span> <span class="cm">/*...*/</span> <span class="o">}</span>
</code></pre></div></div>

<h2 id="12-부정-피하기">1.2 부정 피하기</h2>

<h3 id="긍정표현식이-부정표현식-보다-더-낫다">긍정표현식이 부정표현식 보다 더 낫다</h3>

<ul>
  <li>부정적메서드를 긍정적 메서드로 변경한다.
    <ul>
      <li>비슷한 메서드가 한쌍이 생기면 부정메서드를 제거한다.</li>
    </ul>
  </li>
</ul>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// microscope.isInorganic(sample) 의 결과가 Boolean 일 경우</span>
<span class="c1">// as-is</span>
<span class="k">if</span> <span class="o">(</span><span class="n">microscope</span><span class="o">.</span><span class="na">isInorganic</span><span class="o">(</span><span class="n">sample</span><span class="o">))</span> <span class="o">{</span>
  <span class="k">return</span> <span class="nc">Result</span><span class="o">.</span><span class="na">INORGANIC</span><span class="o">;</span>
<span class="o">}</span> <span class="k">else</span> <span class="o">{</span>
  <span class="k">return</span> <span class="nf">analyzeOrganic</span><span class="o">(</span><span class="n">sample</span><span class="o">);</span>
<span class="o">}</span>

<span class="k">if</span> <span class="o">(!</span><span class="n">microscope</span><span class="o">.</span><span class="na">isHumanoid</span><span class="o">(</span><span class="n">sample</span><span class="o">)</span> <span class="o">=</span> <span class="kc">true</span><span class="o">)</span> <span class="o">{</span>
  <span class="k">return</span> <span class="nc">Result</span><span class="o">.</span><span class="na">ALIEN</span><span class="o">;</span>
<span class="o">}</span> <span class="k">else</span> <span class="o">{</span>
  <span class="k">return</span> <span class="nc">Result</span><span class="o">.</span><span class="na">HUMAN</span><span class="o">;</span>
<span class="o">}</span>

<span class="c1">// to-be</span>
<span class="k">if</span> <span class="o">(</span><span class="n">microscope</span><span class="o">.</span><span class="na">isOrganic</span><span class="o">(</span><span class="n">sample</span><span class="o">))</span> <span class="o">{</span> <span class="c1">// 부정메서드를 긍정메서드로 리팩토링</span>
  <span class="k">return</span> <span class="nf">analyzeOrganic</span><span class="o">(</span><span class="n">sample</span><span class="o">);</span>
<span class="o">}</span> <span class="k">else</span> <span class="o">{</span>
  <span class="k">return</span> <span class="nc">Result</span><span class="o">.</span><span class="na">INORGANIC</span><span class="o">;</span>
<span class="o">}</span>

<span class="k">if</span> <span class="o">(</span><span class="n">microscope</span><span class="o">.</span><span class="na">isHumanoid</span><span class="o">(</span><span class="n">sample</span><span class="o">)</span> <span class="o">=</span> <span class="kc">true</span><span class="o">)</span> <span class="o">{</span> <span class="c1">// 부정 표현 ! 을 제거하고 if 내용 순서 변경</span>
  <span class="k">return</span> <span class="nc">Result</span><span class="o">.</span><span class="na">HUMAN</span><span class="o">;</span>
<span class="o">}</span> <span class="k">else</span> <span class="o">{</span>
  <span class="k">return</span> <span class="nc">Result</span><span class="o">.</span><span class="na">ALIEN</span><span class="o">;</span>
<span class="o">}</span>
</code></pre></div></div>

<h2 id="13-불-표현식-직접-반환">1.3 불 표현식 직접 반환</h2>

<h3 id="불을-반환할때는-전체항목을-if로-감쌀-필요없이-바로-반환가능">불을 반환할때는 전체항목을 if로 감쌀 필요없이 바로 반환가능.</h3>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// as-is</span>
<span class="kt">boolean</span> <span class="nf">isValid</span><span class="o">()</span> <span class="o">{</span>
  <span class="k">if</span> <span class="o">(</span><span class="n">mission</span> <span class="o">&lt;</span> <span class="mi">0</span> <span class="o">||</span> <span class="n">name</span> <span class="o">==</span> <span class="kc">null</span> <span class="o">||</span> <span class="n">name</span><span class="o">.</span><span class="na">trim</span><span class="o">().</span><span class="na">isEmpty</span><span class="o">)</span>  <span class="o">{</span>
    <span class="k">return</span> <span class="kc">false</span><span class="o">;</span>
  <span class="o">}</span> <span class="k">else</span> <span class="o">{</span>
    <span class="k">return</span> <span class="kc">true</span><span class="o">;</span>
  <span class="o">}</span>
<span class="o">}</span>

<span class="c1">// to-be</span>
<span class="kt">boolean</span> <span class="nf">isValid</span><span class="o">()</span> <span class="o">{</span>
  <span class="k">return</span> <span class="n">misstion</span> <span class="o">&gt;=</span> <span class="mi">0</span> <span class="o">&amp;&amp;</span> <span class="n">name</span> <span class="o">!=</span> <span class="kc">null</span> <span class="o">&amp;&amp;</span> <span class="o">!</span><span class="n">name</span><span class="o">.</span><span class="na">trim</span><span class="o">().</span><span class="na">isEmpty</span><span class="o">();</span>
<span class="o">}</span>
</code></pre></div></div>

<h3 id="반환할-boolean의-비교문의-덩어리가-클경우-의미있는-조건-덩어리로-나눠서-불표현식의-간소화를-하면-더-좋다">반환할 boolean의 비교문의 덩어리가 클경우 의미있는 조건 덩어리로 나눠서 불표현식의 간소화를 하면 더 좋다</h3>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kt">boolean</span> <span class="nf">isValid</span><span class="o">()</span> <span class="o">{</span>
  <span class="kt">boolean</span> <span class="n">isValidMission</span> <span class="o">=</span> <span class="n">mission</span> <span class="o">&gt;=</span> <span class="mi">0</span><span class="o">;</span>
  <span class="kt">boolean</span> <span class="n">isValidName</span> <span class="o">=</span> <span class="n">name</span> <span class="o">!=</span> <span class="kc">null</span> <span class="o">&amp;&amp;</span> <span class="o">!</span><span class="n">name</span><span class="o">.</span><span class="na">trim</span><span class="o">().</span><span class="na">isEmpty</span><span class="o">();</span>
  <span class="k">return</span> <span class="n">isValidMission</span> <span class="o">&amp;&amp;</span> <span class="n">isValidName</span><span class="o">;</span>
<span class="o">}</span>
</code></pre></div></div>

<h1 id="14-불표현식-간소화">1.4 불표현식 간소화</h1>

<ul>
  <li>여러 조건문이 합쳐져서 복잡해진 불표현식은 추상화하여 메소드로 뽑아내서 심플하게 바꾸자.
    <ul>
      <li>조건이 복잡해서 파악이 힘들어지면 코드변경시 오류를 유발할 수 있음.</li>
    </ul>
  </li>
</ul>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// as-is</span>
<span class="kt">boolean</span> <span class="nf">willCrewSurvive</span><span class="o">()</span> <span class="o">{</span>
  <span class="k">return</span> <span class="n">선체</span><span class="o">.</span><span class="na">구멍</span> <span class="o">==</span> <span class="mi">0</span>
    <span class="o">&amp;&amp;</span> <span class="n">연료탱크</span><span class="o">.</span><span class="na">연료</span> <span class="o">&gt;</span> <span class="n">네비</span><span class="o">.</span><span class="na">지구가는데필요한연료</span>
    <span class="o">&amp;&amp;</span> <span class="n">산소탱크</span><span class="o">.</span><span class="na">지속가능</span><span class="o">(</span><span class="n">크루인원</span><span class="o">)</span> <span class="o">&gt;</span> <span class="n">네비</span><span class="o">.</span><span class="na">지구까지가는시간</span><span class="o">();</span>
<span class="o">}</span>
<span class="c1">// to-be</span>
<span class="kt">boolean</span> <span class="nf">willCrewSurvive</span><span class="o">()</span> <span class="o">{</span>
  <span class="kt">boolean</span> <span class="n">충분한연료</span> <span class="o">=</span> <span class="n">hasEnoughOxygen</span><span class="o">()</span> <span class="o">&amp;&amp;</span> <span class="n">hasEnoughFuel</span><span class="o">();</span>
  <span class="k">return</span> <span class="n">선체</span><span class="o">.</span><span class="na">온전한가</span> <span class="o">&amp;&amp;</span> <span class="n">충분한연료</span><span class="o">;</span>
<span class="o">}</span>

<span class="kd">private</span> <span class="kt">boolean</span> <span class="nf">hasEnoughOxygen</span><span class="o">()</span> <span class="o">{</span>
  <span class="k">return</span> <span class="n">산소탱크</span><span class="o">.</span><span class="na">지속가능</span><span class="o">(</span><span class="n">크루인원</span><span class="o">)</span> <span class="o">&gt;</span> <span class="n">네비</span><span class="o">.</span><span class="na">지구까지가는시간</span><span class="o">();</span>
<span class="o">}</span>

<span class="kd">private</span> <span class="kt">boolean</span> <span class="nf">hasEnoughFuel</span><span class="o">()</span> <span class="o">{</span>
  <span class="k">return</span> <span class="n">연료탱크</span><span class="o">.</span><span class="na">연료</span> <span class="o">&gt;</span> <span class="n">네비</span><span class="o">.</span><span class="na">지구가는데필요한연료</span><span class="o">;</span>
<span class="o">}</span>
</code></pre></div></div>

<h1 id="15-조건문에서-nullpointerexception-피하기">1.5 조건문에서 NullPointerException 피하기</h1>

<ul>
  <li>null 이 올수 있는 값은 우선적으로 null 인지 체크를 하자.</li>
</ul>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// as-is</span>
<span class="k">if</span> <span class="o">(</span><span class="n">message</span><span class="o">.</span><span class="na">trim</span><span class="o">().</span><span class="na">isEmpty</span> <span class="o">||</span> <span class="n">message</span> <span class="o">==</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{}</span> <span class="c1">// message가 null 일경우 nullPointerException 발생</span>

<span class="c1">// to-bo</span>
<span class="k">if</span> <span class="o">(</span><span class="n">message</span> <span class="o">==</span> <span class="kc">null</span> <span class="o">||</span> <span class="n">message</span><span class="o">.</span><span class="na">trim</span><span class="o">().</span><span class="na">isEmpty</span><span class="o">)</span> <span class="o">{}</span> <span class="c1">// null 여부를 먼저 확인함으로써 exception 발생을 회피.</span>

</code></pre></div></div>

<h1 id="16-스위치-실패-피하기">1.6 스위치 실패 피하기</h1>

<ul>
  <li>관심사는 하나만
    <ul>
      <li>서로 다른 관심사는 서로 다른 코드블록에 넣어야한다.</li>
      <li>관심사 분리에 유리한 if문을 사용하는 것도 방법</li>
    </ul>
  </li>
  <li>예비분기 default와 break 사용을 잊지말자.</li>
</ul>

<h1 id="17-항상-괄호-사용하기">1.7 항상 괄호 사용하기</h1>

<ul>
  <li>if 문에서 괄호없이 사용할경우 한줄까지만 조건에 해당하기떄문에 의도치 않은 버그가 발생하기 쉽다.</li>
</ul>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// as-is</span>
<span class="k">if</span><span class="o">(</span><span class="n">조건</span><span class="o">)</span>
  <span class="n">조건결과</span> <span class="c1">// 해당</span>
  <span class="n">조건결과</span> <span class="c1">// if문에 해당하지않음.</span>

<span class="c1">// to-be</span>
<span class="k">if</span><span class="o">(</span><span class="n">조건</span><span class="o">)</span> <span class="o">{</span>
  <span class="n">조건결과</span> <span class="c1">// 해당</span>
  <span class="n">조건결과</span> <span class="c1">// 해당</span>
<span class="o">}</span>
</code></pre></div></div>

<h1 id="18-코드-대칭-이용하기">1.8 코드 대칭 이용하기</h1>

<ul>
  <li>코드의 목적이 명확해진다.</li>
  <li>코드가 대칭인지 판단
    <ul>
      <li>모든 분기가 비슷한 관심사를 표현하는가?</li>
      <li>병렬 구조를 띠나?</li>
      <li>분기가 모두 대칭인가?</li>
    </ul>
  </li>
</ul>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// as-is</span>
<span class="k">if</span> <span class="o">(</span><span class="n">user</span><span class="o">.</span><span class="na">is미확인</span><span class="o">)</span> <span class="o">{</span>
  <span class="c1">// ....</span>
<span class="o">}</span> <span class="k">else</span> <span class="k">if</span> <span class="o">(</span><span class="n">user</span><span class="o">.</span><span class="na">is우주비행사</span><span class="o">)</span> <span class="o">{</span>
  <span class="c1">// ....</span>
<span class="o">}</span> <span class="k">else</span> <span class="o">(</span><span class="n">user</span><span class="o">.</span><span class="na">is사령관</span><span class="o">)</span> <span class="o">{</span>
  <span class="c1">// ...</span>
<span class="o">}</span>

<span class="c1">// to-be - 관심사 분리 적용 및 빠른실패처리</span>
<span class="k">if</span> <span class="o">(</span><span class="n">user</span><span class="o">.</span><span class="na">is미확인</span><span class="o">)</span> <span class="o">{</span>
  <span class="k">return</span> <span class="o">...</span> <span class="c1">// fast fail</span>
<span class="o">}</span>

<span class="k">if</span> <span class="o">(</span><span class="n">user</span><span class="o">.</span><span class="na">is우주비행사</span><span class="o">)</span> <span class="o">{</span>
  <span class="c1">// ....</span>
<span class="o">}</span> <span class="k">else</span> <span class="o">(</span><span class="n">user</span><span class="o">.</span><span class="na">is사령관</span><span class="o">)</span> <span class="o">{</span>
  <span class="c1">// ...</span>
<span class="o">}</span>
</code></pre></div></div>]]></content><author><name>두식</name></author><category term="도서" /><category term="자바코딩의_기술" /><summary type="html"><![CDATA[1장 우선정리부터]]></summary></entry><entry><title type="html">Welcome to Jekyll!</title><link href="http://localhost:4000/jekyll/update/welcome-to-jekyll/" rel="alternate" type="text/html" title="Welcome to Jekyll!" /><published>2022-09-26T15:15:35+09:00</published><updated>2022-09-26T15:15:35+09:00</updated><id>http://localhost:4000/jekyll/update/welcome-to-jekyll</id><content type="html" xml:base="http://localhost:4000/jekyll/update/welcome-to-jekyll/"><![CDATA[<p>You’ll find this post in your <code class="language-plaintext highlighter-rouge">_posts</code> directory. Go ahead and edit it and re-build the site to see your changes. You can rebuild the site in many different ways, but the most common way is to run <code class="language-plaintext highlighter-rouge">jekyll serve</code>, which launches a web server and auto-regenerates your site when a file is updated.</p>

<p>To add new posts, simply add a file in the <code class="language-plaintext highlighter-rouge">_posts</code> directory that follows the convention <code class="language-plaintext highlighter-rouge">YYYY-MM-DD-name-of-post.ext</code> and includes the necessary front matter. Take a look at the source for this post to get an idea about how it works.</p>

<p>Jekyll also offers powerful support for code snippets:</p>

<figure class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span class="k">def</span> <span class="nf">print_hi</span><span class="p">(</span><span class="nb">name</span><span class="p">)</span>
<span class="nb">puts</span> <span class="s2">"Hi, </span><span class="si">#{</span><span class="nb">name</span><span class="si">}</span><span class="s2">"</span>
<span class="k">end</span>
<span class="n">print_hi</span><span class="p">(</span><span class="s1">'Tom'</span><span class="p">)</span>
<span class="c1">#=&gt; prints 'Hi, Tom' to STDOUT.</span></code></pre></figure>

<p>Check out the <a href="https://jekyllrb.com/docs/home">Jekyll docs</a> for more info on how to get the most out of Jekyll. File all bugs/feature requests at <a href="https://github.com/jekyll/jekyll">Jekyll’s GitHub repo</a>. If you have questions, you can ask them on <a href="https://talk.jekyllrb.com/">Jekyll Talk</a>.</p>]]></content><author><name>두식</name></author><category term="jekyll" /><category term="update" /><summary type="html"><![CDATA[You’ll find this post in your _posts directory. Go ahead and edit it and re-build the site to see your changes. You can rebuild the site in many different ways, but the most common way is to run jekyll serve, which launches a web server and auto-regenerates your site when a file is updated.]]></summary></entry></feed>